name: Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Checkout the repository code

      - name: Set up SSH key
        run: |
          # Create the .ssh directory
          mkdir -p ~/.ssh

          # Set the private key in the id_rsa file using the GitHub Secret (EC2_SSH_KEY)
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa

          # Set the correct permissions for the SSH private key
          chmod 600 ~/.ssh/id_rsa

          # Add the EC2 host to known_hosts to avoid SSH authenticity warning
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        shell: /usr/bin/bash -e {0}

      - name: Verify SSH connection to EC2
        run: |
          # Check SSH connection to the EC2 instance by running a simple command (e.g., 'uptime')
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "uptime"

      - name: Run auto_deploy.sh script on EC2
        run: |
          # SSH into the EC2 instance and run the auto_deploy.sh script
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Check if the auto_deploy.sh script exists in the specified directory
            if [ ! -f /var/www/html/auto_deploy.sh ]; then
              echo "Error: auto_deploy.sh not found in /var/www/html"
              exit 1
            fi

            # Make the auto_deploy.sh script executable
            sudo chmod +x /var/www/html/auto_deploy.sh

            # Run the script
            sudo bash /var/www/html/auto_deploy.sh
          EOF

      - name: Cleanup
        run: |
          # Remove the SSH private key for security reasons
          rm -rf ~/.ssh/id_rsa
